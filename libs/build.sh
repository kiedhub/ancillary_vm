#!/bin/bash

[ -z $DEBUG ] && DEBUG=false

[ $DEBUG = true ] && echo "Including ${BASH_SOURCE[0]}"

# Directory references
#BUILD_DIR="$SCRIPT_DIR/$vmName"
#[ $DEBUG = true ] && echo "BUILD_DIR: $BUILD_DIR"

check_prerequisites()
{
  # check virt-install installed
  virtinst_isInstalled=$(apt list | grep virtinst | grep installed | wc -l)
  #echo "virtinst_isInstalled: $virtinst_isInstalled"
  if [ $virtinst_isInstalled -lt 1 ]; then 
    echo "ERR: Required tool 'virt-install' not installed!"
    echo "Please install and re-run build_vm script"
    echo "   apt install virtinst"
    exit 0
  fi

  # check iommu settings for intel CPUs
  isIntelCpu=false
  hasIommuSet=false
  [ $(lscpu | grep GenuineIntel | wc -l) -gt 0 ] && isIntelCpu=True
  [ $(cat /proc/cmdline | grep -o iommu | wc -l) -gt 1 ] && hasIommuSet=true

  if ! ($isIntel & $hasIommuSet); then 
    echo "ERR: Missing required iommu command line configuration"
    echo "  add 'intel_iommu=on iommu=pt' to 'GRUB_CMDLINE_LINUX' configuration (/etc/default/grub)"
    echo "  issue command 'sudo update-grub2' and reboot"
    echo "  check after reboot: 'cat /proc/cmdline'"
    exit 0
  fi
}

get_user_info()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  cd ~
  homeDir=$(pwd)

  if [ $homeDir = "/root" ]; then
    user="root"
  else
    # user not root
    user=$(echo $homeDir | sed -e 's/\// /g' | awk '{ print $2}')
    [ $DEBUG = true ] && echo "  sudoer $user"
  fi

  [ $DEBUG = true ] && echo "  Changing directory to: $SCRIPT_DIR"
  cd $SCRIPT_DIR
}

setup_environment()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  BUILD_DIR="$SCRIPT_DIR/$vmName-build"
  [ $DEBUG = true ] && echo "  BUILD_DIR: $BUILD_DIR"

  # create directory for build files
  [ ! -d "$BUILD_DIR" ] && { \
    mkdir -p $BUILD_DIR;\
    [ $DEBUG = true ] && echo "  Creating directory $BUILD_DIR";\
  } || { [ $DEBUG = true ] && echo "  Directory $BUILD_DIR exists, nothing to do"; }
  
  # install cloud image utilities
  if [ -e /usr/bin/cloud-localds ]; then 
    [ $DEBUG = true ] && echo "  Package cloud-image-utils already installed" 
  else 
    [ $DEBUG = true ] && echo "  Installing package cloud-image-utils" 
    (sh -c "apt-get update; apt-get -y install cloud-image-utils")
  fi
}

check_management_network()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  if [ $(brctl show |grep "$vmMgmtBridge" | wc -l) -lt 1 ]; then
    echo "Management bridge $vmMgmtBridge does not exists, please create" 
    exit 
  fi

  [ $DEBUG = true ] && echo "  Check of existing management bridge $vmMgmtBridge -> OK"
}

check_existing_vm()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  if [ $(virsh list --all | grep "$vmName" | wc -l) -gt 0 ]; then 
    echo "Virtual machine $vmName already exist, consider removing it first"
    echo ""
    echo "  virsh destroy $vmName"
    echo "  virsh undefine $vmName"
    echo
    exit 
  fi
  [ $DEBUG = true ] &&  echo "  Check for non-existing VM named $vmName -> OK"

  if [ -e /var/lib/libvirt/images/$seedImageName ]; then
    echo "File /var/lib/libvirt/images/$seedImageName exists, removing it"
    rm -f /var/lib/libvirt/images/$seedImageName
  fi

  if [ -e /var/lib/libvirt/images/$vmImageName ]; then
    echo "File /var/lib/libvirt/images/$vmImageName exists, removing it"
    rm -f /var/lib/libvirt/images/$vmImageName
  fi
}

create_ssh_keypair()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  echo "y" | ssh-keygen -C "auto-generated-key" -b 2048 -t rsa -f $BUILD_DIR/$vmSshKeyName -q -N ""
  sshPrvKey=$(cat $BUILD_DIR/$vmSshKeyName)
  sshPubKey=$(cat $BUILD_DIR/$vmSshKeyName.pub)
  [ $DEBUG = true ] && echo "  Autogenerated ssh key pair:"
  [ $DEBUG = true ] && echo "    $BUILD_DIR/$vmSshKeyName"
  [ $DEBUG = true ] && echo "    $BUILD_DIR/$vmSshKeyName.pub"
}

grab_cloud_image()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
  cd $BUILD_DIR

  if [ -e $vmImageName ]; then
    echo "OS Image $vmImageName already exist, skipping download"
  else
    echo "OS Image $vmImageName does not exist, starting download..."
  	case $osVersion in 
      18.04)
        downloadLink="$ubuntu1804Url"
        ;;
      20.04)
        downloadLink="$ubuntu2004Url"
        ;;
    esac
    wget -O $vmImageName $downloadLink
  fi

  cd $SCRIPT_DIR
}

move_vm_files()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
  cd $BUILD_DIR

  [ $DEBUG = true ] && echo "  Moving seed image file $seedImageName"
  mv $seedImageName /var/lib/libvirt/images/
  [ $DEBUG = true ] && echo "  Copying qcow file $vmImageName"
  cp $vmImageName /var/lib/libvirt/images/

  [ $DEBUG = true ] && echo "  Changeing ownership of transferred files"
  chown libvirt-qemu:kvm /var/lib/libvirt/images/$seedImageName
  chown libvirt-qemu:kvm /var/lib/libvirt/images/$vmImageName
  
  cd $SCRIPT_DIR
}

resize_vm_image()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
  [ $DEBUG = true ] && echo "  Resizing image $vmImageName $incImageSize"
  qemu-img resize /var/lib/libvirt/images/$vmImageName $incImageSize
  sudo qemu-img info /var/lib/libvirt/images/$vmImageName
}

create_virtual_machine()
{
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"
  cd $BUILD_DIR

  [ $DEBUG = true ] && echo "  Creating file virt_install.sh and executing it"

  echo "virt-install --accelerate \\
  --name $vmName \\
  --disk path=/var/lib/libvirt/images/$vmImageName,size=50,format=qcow2 \\
  --disk path=/var/lib/libvirt/images/$seedImageName,device=cdrom \\
  --os-type generic \\
  --network bridge=$vmMgmtBridge,model=virtio \\
  $vmHostdevs
  --vcpus=$vmVcpus \\
  --ram=$vmMem \\
  --cpu host-passthrough,cache.level=3,cache.mode=emulate \\
  --cpuset=$vmCpuset \\
  --boot hd \\
  --noautoconsole " > $BUILD_DIR/virt_install.sh

  sh ./virt_install.sh

  cd $SCRIPT_DIR
}

copy_identity_file()
{ 
  [ $DEBUG = true ] && echo "${FUNCNAME[0]}"

  if [ -d ~/.ssh ]; then
    echo "Copying identity file"
    cp -f $BUILD_DIR/$vmSshKeyName ~/.ssh/
    chown $user:$user ~/.ssh/$vmSshKeyName
  else
    echo "~/.ssh does not exist, creating it."
    mkdir ~/.ssh
    echo "Copying identity file"
    cp -f $BUILD_DIR/$vmSshKeyName ~/.ssh/
    chown $user:$user ~/.ssh/$vmSshKeyName
  fi
  # remove existing and known host
  echo "Updating known_hosts file"
  ssh-keygen -f "$SCRIPT_DIR/.ssh/known_hosts" -R "$ipAddress"
}


print_final_message()
{
  echo ""
  echo "############"
  echo ""
  echo "VM installation may not have finished, yet"
  echo "Progress can be verified via console:"
  echo "  virsh console $vmName"
  echo "SSH access to VM:"
  echo "  ssh root@$ipAddress -i ~/.ssh/$vmSshKeyName"
  echo "    (or using password \"$vmUserPwd\""
  echo ""
  echo "############"
}
